{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","peopleLocal","name","url","TinderCards","useState","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","preventSwipe","style","backgroundImage","SwipeButtons","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","image","messages","placeholder","type","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b2bcee04.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Header.css\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport ForumIcon from \"@material-ui/icons/Forum\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport {Link, useHistory} from \"react-router-dom\";\n\n\nfunction Header({backButton}) {\n    const history = useHistory();\n    return (\n        <div className=\"header\">\n            {backButton ? (\n                <IconButton onClick={() => history.replace(backButton)}>\n                    <ArrowBackIosIcon fontSize=\"large\" className=\"header__icon\" />\n                </IconButton>\n            ) : (\n                <IconButton>\n                    <PersonIcon className=\"header__icon\" fontSize=\"large\" />\n                </IconButton>\n            )}\n\n            <Link to=\"/\">\n            <img className=\"header__logo\"\n                 src=\"tinder-clone/logo101.png\"\n                 alt=\"tinder logo\"/>\n             </Link>\n             <Link to=\"/chats\">\n             <IconButton>\n                <ForumIcon className=\"header__icon\" fontSize=\"large\"/>\n             </IconButton>\n             </Link>\n        </div>\n    )\n}\n\nexport default Header;","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBrSstHWD5fZHPkbNN1J5IkCNPdayeM8x4\",\n    authDomain: \"tinder-clone-1a925.firebaseapp.com\",\n    databaseURL: \"https://tinder-clone-1a925.firebaseio.com\",\n    projectId: \"tinder-clone-1a925\",\n    storageBucket: \"tinder-clone-1a925.appspot.com\",\n    messagingSenderId: \"23198969677\",\n    appId: \"1:23198969677:web:aa6ce678514866015b9104\",\n    measurementId: \"G-0DJCVSZ7RE\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst database = firebaseApp.firestore();\n\nexport default database;","import React, {useEffect, useState} from 'react';\nimport TinderCard  from \"react-tinder-card\";\nimport database from \"./firebase\";\nimport \"./TinderCards.css\"\n\nconst peopleLocal = [\n    {\n        name: \"Rachel\",\n        url: \"/tinder-clone/rachel.jpeg\"\n\n    },\n    {\n        name: \"Arpit\",\n        url: \"https://avatars1.githubusercontent.com/u/16517873?v=4\"\n    },\n    {\n        name: \"Poonam\",\n        url: \"tinder-clone/poonam_soni.jpeg\"\n    },\n    {\n        name: \"Emily\",\n        url: \"tinder-clone/emily.jpeg\"\n    },\n    {\n        name: \"Monica\",\n        url: \"tinder-clone/monica.jpeg\"\n    },\n    {\n        name: \"Phoebe\",\n        url: \"tinder-clone/pheoebe.jpeg\"\n    },\n    {\n        name: \"Rachel\",\n        url: \"tinder-clone/rachel.jpeg\"\n    },\n    {\n        name: \"Joey\",\n        url: \"tinder-clone/Joey.jpeg\"\n    },\n    {\n        name: \"Chandler\",\n        url: \"tinder-clone/chandler.jpeg\"\n    }\n\n\n]\n\nfunction TinderCards() {\n    const [people, setPeople]  = useState([]);\n\n    useEffect(() => {\n        const unsubscribe = database.collection('people').onSnapshot(snapshot => {\n                setPeople(snapshot.docs.map(doc => doc.data()));\n            }\n        )\n        return () => {\n            unsubscribe();\n        }\n    }, [])\n\n    return (\n        <div>\n        <div className=\"tinderCards__cardContainer\">\n            {peopleLocal.map((person) => (\n                <TinderCard className=\"swipe\"\n                            key={person.name} preventSwipe={['up', 'down']}>\n                    <div className=\"card\"\n                        style={{backgroundImage: `url(${person.url})`}} >\n                        <h3>{person.name}</h3>\n                    </div>\n                </TinderCard>\n            ))}\n        </div>\n        </div>\n    )\n}\nexport default TinderCards;","import React from 'react';\nimport ReplayIcon from \"@material-ui/icons/Replay\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport \"./SwipeButtons.css\";\n\nfunction SwipeButtons() {\n    return(\n        <div className=\"swipeButtons\">\n            <IconButton className=\"swipeButtons_repeat\">\n          <ReplayIcon fontSize=\"large\"/>\n          </IconButton>\n           <IconButton className=\"swipeButtons__left\">\n          <CloseIcon fontSize = \"large\"/>\n           </IconButton>\n            <IconButton className=\"swipeButtons__star\">\n          <StarRateIcon fontSize=\"large\"/>\n            </IconButton>\n            <IconButton className=\"swipeButtons__right\">\n          <FavoriteIcon fontSize=\"large\"/>\n            </IconButton>\n            <IconButton className=\"swipeButtons__lightning\">\n          <FlashOnIcon fontSize=\"large\" />\n            </IconButton>\n        </div>\n    )\n}\n\nexport default SwipeButtons","import React from 'react';\nimport './Chat.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport {Link} from 'react-router-dom';\n\nfunction Chat({name, message, profilePic, timestamp}) {\n    return (\n       <Link to={`/chat/${name}`}>\n        <div className=\"chat\">\n            <Avatar className=\"chat__image\" alt={name} src={profilePic}/>\n            <div className=\"chat__details\">\n            <h2>{name}</h2>\n            <p>{message}</p>\n            </div>\n            <p className=\"chat__timestamp\">{timestamp}</p>\n        </div>\n        </Link>\n    );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport \"./Chats.css\";\nimport Chat from \"./Chat\"\n\nfunction Chats() {\n    return(\n        <div className=\"chats\">\n            <Chat\n            name=\"Mark\"\n            message=\"Hey! How are you?\"\n            timestamp=\"40 seconds ago\"\n            profilePic = \"...\" />\n            <Chat\n                name=\"Arpit\"\n                message=\"Whats up ?\"\n                timestamp=\"30 seconds ago\"\n                profilePic = \"https://scontent.fblr1-4.fna.fbcdn.net/v/t1.0-9/p960x960/117411674_3071504492897135_521212679289573870_o.jpg?_nc_cat=108&_nc_sid=85a577&_nc_ohc=vU74FSQIwmEAX88zqLm&_nc_ht=scontent.fblr1-4.fna&tp=6&oh=37a1f65100379849a7e086dc9e697c51&oe=5F814450\" />\n            <Chat\n                name=\"Jean\"\n                message=\"Ola !!\"\n                timestamp=\"3 days ago\"\n                profilePic = \"...\" />\n            <Chat\n                name=\"Poonam\"\n                message=\"Yo whats up\"\n                timestamp=\"1 week ago\"\n                profilePic = \"https://scontent.fblr1-3.fna.fbcdn.net/v/t31.0-8/p960x960/21768614_1781951555179006_3081378396254504956_o.jpg?_nc_cat=107&_nc_sid=85a577&_nc_ohc=jVKxI4zaPGAAX-ehqkm&_nc_ht=scontent.fblr1-3.fna&tp=6&oh=9e529c90405a2beafaf775c24251927a&oe=5F7E8B05\" />\n        </div>\n    )\n\n}\n\nexport default Chats;","import React, {useState} from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport \"./ChatScreen.css\";\n\nfunction ChatScreen() {\n    const [messages, setMessages] = useState([\n        {\n            name: 'Arpit',\n            image: 'https://scontent.fblr1-4.fna.fbcdn.net/v/t1.0-9/p960x960/117411674_3071504492897135_521212679289573870_o.jpg?_nc_cat=108&_nc_sid=85a577&_nc_ohc=vU74FSQIwmEAX88zqLm&_nc_ht=scontent.fblr1-4.fna&tp=6&oh=37a1f65100379849a7e086dc9e697c51&oe=5F814450',\n            message: 'Whats up :heart'\n        },\n        {\n            name: 'Arpit',\n            image: 'https://scontent.fblr1-4.fna.fbcdn.net/v/t1.0-9/p960x960/117411674_3071504492897135_521212679289573870_o.jpg?_nc_cat=108&_nc_sid=85a577&_nc_ohc=vU74FSQIwmEAX88zqLm&_nc_ht=scontent.fblr1-4.fna&tp=6&oh=37a1f65100379849a7e086dc9e697c51&oe=5F814450',\n            message: 'Howz it going?'\n        },\n        {\n            message: \"Howddyy!!\"\n        }\n    ])\n    return (\n        <div className=\"chatScreen\">\n            <p className=\"chatScreen_timeStamp\" >YOU MATCHED WITH ELLEN ON 10/08/20</p>\n            {messages.map(message => (\n                message.name ? (\n                    <div className=\"chatScreen__message\">\n                        <Avatar\n                            className=\"chatScreen__image\"\n                            alt={message.name}\n                            src = {message.image}\n                        />\n                        <p className=\"chatScreen_text\">{message.message}</p>\n                    </div>\n                ) : (\n                    <div className=\"chatScreen__message\">\n                        <p className=\"chatScreen_textUser\">{message.message}</p>\n                    </div>\n                )\n            ))}\n\n            <form className=\"chatScreen_input\">\n                <input className=\"chatScreen_inputField\" placeholder=\"Type a message...\" type='text'>\n                </input>\n                <button className=\"chatScreen_inputButton\">SEND </button>\n            </form>\n\n        </div>\n    )\n}\n\nexport default ChatScreen;","import React from 'react';\nimport Header from './Header';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport './App.css';\nimport TinderCards from './TinderCards';\nimport SwipeButtons from \"./SwipeButtons\";\nimport Chats from \"./Chats\";\nimport ChatScreen from \"./ChatScreen\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n            <Switch>\n                <Route path = \"/chat/:person\">\n                    <Header backButton=\"/chats\" />\n                    <ChatScreen />\n                </Route>\n                <Route path = \"/chats\">\n                    <Header backButton=\"/\" />\n                    <Chats />\n                </Route>\n                <Route path=\"/\">\n                    <Header/>\n                    <TinderCards />\n                    <SwipeButtons />\n                </Route>\n            </Switch>\n        </Router>\n    </div>\n  );\n}\n\n\n//\n// {/* Tinder Cards */}\n// {/* Buttons below tinder cards */}\n// {/* Chat screen */}\n// {/* Individual chat screen */}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}